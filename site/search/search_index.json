{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home A Place to Learn to Code in JavaScript. What is StartJS? StartJS is a JavaScript Tutorial Website, open-sourced at github.com/steviebeenz/startjs What is JavaScript? JavaScript (/\u02c8d\u0292\u0251\u02d0v\u0259\u02ccskr\u026apt/),[6] often abbreviated as JS, is a programming language that conforms to the ECMAScript specification.[7] JavaScript is high-level, often just-in-time compiled, and multi-paradigm. It has curly-bracket syntax, dynamic typing, prototype-based object-orientation, and first-class functions. Alongside HTML and CSS, JavaScript is one of the core technologies of the World Wide Web.[8] JavaScript enables interactive web pages and is an essential part of web applications. The vast majority of websites use it for client-side page behavior,[9] and all major web browsers have a dedicated JavaScript engine to execute it. As a multi-paradigm language, JavaScript supports event-driven, functional, and imperative programming styles. It has application programming interfaces (APIs) for working with text, dates, regular expressions, standard data structures, and the Document Object Model (DOM). However, the language itself does not include any input/output (I/O), such as networking, storage, or graphics facilities, as the host environment (usually a web browser) provides those APIs. JavaScript engines were originally used only in web browsers, but they are now embedded in some servers, usually via Node.js. They are also embedded in a variety of applications created with frameworks such as Electron and Cordova. Although there are similarities between JavaScript and Java, including language name, syntax, and respective standard libraries, the two languages are distinct and differ greatly in design. - Wikipedia Ready to Start Learning JavaScript? Check out or Starting Tutorial Any Questions? Need Help? Create an Issue at our GitHub Repo . This is the place to discuss JavaScript Queries and Documentation Errors. Another Great Place to ask a question is on Stack Overflow if you don't get an answer on our Issues page.","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#a-place-to-learn-to-code-in-javascript","text":"What is StartJS? StartJS is a JavaScript Tutorial Website, open-sourced at github.com/steviebeenz/startjs","title":"A Place to Learn to Code in JavaScript."},{"location":"#what-is-javascript","text":"JavaScript (/\u02c8d\u0292\u0251\u02d0v\u0259\u02ccskr\u026apt/),[6] often abbreviated as JS, is a programming language that conforms to the ECMAScript specification.[7] JavaScript is high-level, often just-in-time compiled, and multi-paradigm. It has curly-bracket syntax, dynamic typing, prototype-based object-orientation, and first-class functions. Alongside HTML and CSS, JavaScript is one of the core technologies of the World Wide Web.[8] JavaScript enables interactive web pages and is an essential part of web applications. The vast majority of websites use it for client-side page behavior,[9] and all major web browsers have a dedicated JavaScript engine to execute it. As a multi-paradigm language, JavaScript supports event-driven, functional, and imperative programming styles. It has application programming interfaces (APIs) for working with text, dates, regular expressions, standard data structures, and the Document Object Model (DOM). However, the language itself does not include any input/output (I/O), such as networking, storage, or graphics facilities, as the host environment (usually a web browser) provides those APIs. JavaScript engines were originally used only in web browsers, but they are now embedded in some servers, usually via Node.js. They are also embedded in a variety of applications created with frameworks such as Electron and Cordova. Although there are similarities between JavaScript and Java, including language name, syntax, and respective standard libraries, the two languages are distinct and differ greatly in design. - Wikipedia","title":"What is JavaScript?"},{"location":"#ready-to-start-learning-javascript","text":"Check out or Starting Tutorial","title":"Ready to Start Learning JavaScript?"},{"location":"#any-questions-need-help","text":"Create an Issue at our GitHub Repo . This is the place to discuss JavaScript Queries and Documentation Errors. Another Great Place to ask a question is on Stack Overflow if you don't get an answer on our Issues page.","title":"Any Questions? Need Help?"},{"location":"SUMMARY/","text":"Table of contents Home Starting NPM Yarn Projects General ExpressJS Static Web Server NodeJS (Serverside Javascript) Building a Basic Youtube Video Downloader (Part. 1) Web","title":"Table of contents"},{"location":"SUMMARY/#table-of-contents","text":"Home Starting NPM Yarn Projects General ExpressJS Static Web Server NodeJS (Serverside Javascript) Building a Basic Youtube Video Downloader (Part. 1) Web","title":"Table of contents"},{"location":"npm/","text":"NPM What is NPM? NPM is a package manager. A Package is a piece of code that is used like an app, and designed to be used by other JS projects. NPM stores installed modules in a folder called node_modules. Do not touch files in this folder, nor a file called package-lock.json Why Would you use NPM? NPM is a way to save time. Rather than making your own piece of code you could just use a prebuilt one. This is what NPM is about. Why Does StartJS not use NPM? StartJS uses Yarn as it is easier, faster and more secure than NPM. Before Starting ANY Project, please read our Yarn Installation Guide What's Next? We now need to Install Yarn.","title":"NPM"},{"location":"npm/#npm","text":"","title":"NPM"},{"location":"npm/#what-is-npm","text":"NPM is a package manager. A Package is a piece of code that is used like an app, and designed to be used by other JS projects. NPM stores installed modules in a folder called node_modules. Do not touch files in this folder, nor a file called package-lock.json Why Would you use NPM? NPM is a way to save time. Rather than making your own piece of code you could just use a prebuilt one. This is what NPM is about.","title":"What is NPM?"},{"location":"npm/#why-does-startjs-not-use-npm","text":"StartJS uses Yarn as it is easier, faster and more secure than NPM. Before Starting ANY Project, please read our Yarn Installation Guide","title":"Why Does StartJS not use NPM?"},{"location":"npm/#whats-next","text":"We now need to Install Yarn.","title":"What's Next?"},{"location":"start/","text":"Starting First Things First: There are not ALL JS things, but are VERY important when starting JavaScript. If you have learned another programming language already you may have done some of these. Step 1. Install Node.js Step 2. Install VS Code Step 3 (optional). Sign up for a GitHub.com Account Step 4 (optional, requires step 3). Install GitHub Desktop What's Next? Next, we need to learn what NPM is and how to install Yarn. Click Here.","title":"Starting"},{"location":"start/#starting","text":"","title":"Starting"},{"location":"start/#first-things-first","text":"There are not ALL JS things, but are VERY important when starting JavaScript. If you have learned another programming language already you may have done some of these.","title":"First Things First:"},{"location":"start/#step-1","text":"Install Node.js","title":"Step 1."},{"location":"start/#step-2","text":"Install VS Code","title":"Step 2."},{"location":"start/#step-3-40optional41","text":"Sign up for a GitHub.com Account","title":"Step 3 (optional)."},{"location":"start/#step-4-40optional-requires-step-341","text":"Install GitHub Desktop","title":"Step 4 (optional, requires step 3)."},{"location":"start/#whats-next","text":"Next, we need to learn what NPM is and how to install Yarn. Click Here.","title":"What's Next?"},{"location":"npm/","text":"NPM What is NPM? NPM is a package manager. A Package is a piece of code that is used like an app, and designed to be used by other JS projects. NPM stores installed modules in a folder called node_modules. Do not touch files in this folder, nor a file called package-lock.json Why Would you use NPM? NPM is a way to save time. Rather than making your own piece of code you could just use a prebuilt one. This is what NPM is about. Why Does StartJS not use NPM? StartJS uses Yarn as it is easier, faster and more secure than NPM. Before Starting ANY Project, please read our Yarn Installation Guide What's Next? We now need to Install Yarn.","title":"NPM"},{"location":"npm/#npm","text":"","title":"NPM"},{"location":"npm/#what-is-npm","text":"NPM is a package manager. A Package is a piece of code that is used like an app, and designed to be used by other JS projects. NPM stores installed modules in a folder called node_modules. Do not touch files in this folder, nor a file called package-lock.json Why Would you use NPM? NPM is a way to save time. Rather than making your own piece of code you could just use a prebuilt one. This is what NPM is about.","title":"What is NPM?"},{"location":"npm/#why-does-startjs-not-use-npm","text":"StartJS uses Yarn as it is easier, faster and more secure than NPM. Before Starting ANY Project, please read our Yarn Installation Guide","title":"Why Does StartJS not use NPM?"},{"location":"npm/#whats-next","text":"We now need to Install Yarn.","title":"What's Next?"},{"location":"npm/yarn/","text":"Yarn What is Yarn? Yarn is an alternative installer for NPM packages. Yarn is more secure, easier to use, has multi-project support and is faster than NPM. In this Tutorial, I will be showing you how to Install Yarn, Initialize a Folder using Yarn and much more. NOTE tat there is expected setup explained in our Starting Tutorial Installing Yarn Installing Yarn is the one time that we will be using NPM. Simply run the below command in an app called Command Prompt (Windows) or Terminal (MacOS/Linux). We do not Support ChromeOS. npm i -g yarn Then wait for it to finish. Once that's done, that is Yarn Installed. Easy, Right? How to Initialize a Folder using Yarn: {% hint style=\"warning\" %} Do Not do this step until instructed by another tutorial. {% endhint %} Step 1. Open the file in Visual Studio Code. Step 2. Click on the Terminal Category of the Menu, and then click \"New Terminal\". Step 3. Type yarn init and press enter 9 times. What's Next? Why not try one of our Projects ?","title":"Yarn"},{"location":"npm/yarn/#yarn","text":"","title":"Yarn"},{"location":"npm/yarn/#what-is-yarn","text":"Yarn is an alternative installer for NPM packages. Yarn is more secure, easier to use, has multi-project support and is faster than NPM. In this Tutorial, I will be showing you how to Install Yarn, Initialize a Folder using Yarn and much more. NOTE tat there is expected setup explained in our Starting Tutorial","title":"What is Yarn?"},{"location":"npm/yarn/#installing-yarn","text":"Installing Yarn is the one time that we will be using NPM. Simply run the below command in an app called Command Prompt (Windows) or Terminal (MacOS/Linux). We do not Support ChromeOS. npm i -g yarn Then wait for it to finish. Once that's done, that is Yarn Installed. Easy, Right?","title":"Installing Yarn"},{"location":"npm/yarn/#how-to-initialize-a-folder-using-yarn","text":"{% hint style=\"warning\" %} Do Not do this step until instructed by another tutorial. {% endhint %} Step 1. Open the file in Visual Studio Code. Step 2. Click on the Terminal Category of the Menu, and then click \"New Terminal\". Step 3. Type yarn init and press enter 9 times.","title":"How to Initialize a Folder using Yarn:"},{"location":"npm/yarn/#whats-next","text":"Why not try one of our Projects ?","title":"What's Next?"},{"location":"projects/","text":"Projects StartJS Projects: At StartJS we have a wide range of projects of different types for you to choose from. We have project choices from Frontend Design to Backend Server and Chatbots. Below are links to the two different categories: General Projects , Frontend Projects , Backend Projects . Note that in this category we only have Starter Projects, for more projects and examples like Mobile and Desktop apps, check out the Framework Examples (coming soon).","title":"Projects"},{"location":"projects/#projects","text":"","title":"Projects"},{"location":"projects/#startjs-projects","text":"At StartJS we have a wide range of projects of different types for you to choose from. We have project choices from Frontend Design to Backend Server and Chatbots. Below are links to the two different categories: General Projects , Frontend Projects , Backend Projects . Note that in this category we only have Starter Projects, for more projects and examples like Mobile and Desktop apps, check out the Framework Examples (coming soon).","title":"StartJS Projects:"},{"location":"projects/web/","text":"Web","title":"Web"},{"location":"projects/web/#web","text":"","title":"Web"},{"location":"projects/general/","text":"General In this category we aim to show you some projects using both Nodejs and standard Web-based JavaScript.","title":"General"},{"location":"projects/general/#general","text":"In this category we aim to show you some projects using both Nodejs and standard Web-based JavaScript.","title":"General"},{"location":"projects/general/expressjs/","text":"ExpressJS Static Web Server Getting Started (with Yarn) {% hint style=\"warning\" %} Notice: This step requires that you have read our NPM and Yarn Tutorials and have completed the install step of the Yarn tutorial. {% endhint %} First off, create a new folder called StartJS_Express. Then, open it in Visual Studio Code and complete the \"How to Initialize a Folder using Yarn\" section of our Yarn guide. Next, run the following commands in the Terminal Feature of Visual Studio Code: yarn add express This has installed the web server module to your folder. Now you can start on creating a basic Node.js Express Web Server: Making the Web Server: In this step we will make the web server. Make sure you have your new folder open in Visual Studio Code. First off, create a new file called index.js with the following contents: // this line allows us to use the express.js module var express = require(\"express\"); // Add this line so we can serve files from our local // directory var path = require(\"path\"); var app = express(); // Add the ability to serve our static files from the public directory app.use(express.static(\"public\")); // Here we serve up our index page app.get(\"/\", function(req, res) { res.sendFile(path.join(__dirname + \"/public/index.html\")); }); var server = app.listen(80, function() { var host = server.address().address; var port = server.address().port; console.log(\"startjs Demo Server listening at http://%s:%s\", host, port); }); Next, create a new folder called public and add a new file called index.html inside your \"public\" folder with the following contents: <!doctype html> <html lang=\"en\"> <head> <!-- Required meta tags --> <meta charset=\"utf-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> <!-- Bootstrap CSS --> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"> <title>Hello world!</title> </head> <body> <h1>Hello world!</h1> <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\" integrity=\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" crossorigin=\"anonymous\"></script> </body> </html> Now, type localhost into your web browser. Congrats, you are now serving a website onto your network using Node.JS. Now, let's review the code that we have just written: var express = require(\"express\"); This line allows you to use the Express web server. var path = require(\"path\"); // alllow express to use folders. var app = express(); // create the server These two lines create the Express web server and allows you to server a file on your Web Server. app.use(express.static(\"public\")); // Tell express to use the Public Folder. This line tells Express to use the Public folder to server your website from. app.get(\"/\", function(req, res) { res.sendFile(path.join(__dirname + \"/public/index.html\")); }); // Tells Express where the Homepage is. This line (this is one line, expanded into 3 lines for easier readability) tells Express which file to use as the Homepage. var server = app.listen(80, function() { var host = server.address().address; var port = server.address().port; console.log(\"startjs Demo Server listening at http://%s:%s\", host, port); }); This line (this is one line, expanded into 3 lines for easier readability) starts the server. The HTML file is a standard website. Feel free to change it to any HTML code. Just keep it's name as index.html.","title":"ExpressJS Static Web Server"},{"location":"projects/general/expressjs/#expressjs-static-web-server","text":"","title":"ExpressJS Static Web Server"},{"location":"projects/general/expressjs/#getting-started-40with-yarn41","text":"{% hint style=\"warning\" %} Notice: This step requires that you have read our NPM and Yarn Tutorials and have completed the install step of the Yarn tutorial. {% endhint %} First off, create a new folder called StartJS_Express. Then, open it in Visual Studio Code and complete the \"How to Initialize a Folder using Yarn\" section of our Yarn guide. Next, run the following commands in the Terminal Feature of Visual Studio Code: yarn add express This has installed the web server module to your folder. Now you can start on creating a basic Node.js Express Web Server:","title":"Getting Started (with Yarn)"},{"location":"projects/general/expressjs/#making-the-web-server","text":"In this step we will make the web server. Make sure you have your new folder open in Visual Studio Code. First off, create a new file called index.js with the following contents: // this line allows us to use the express.js module var express = require(\"express\"); // Add this line so we can serve files from our local // directory var path = require(\"path\"); var app = express(); // Add the ability to serve our static files from the public directory app.use(express.static(\"public\")); // Here we serve up our index page app.get(\"/\", function(req, res) { res.sendFile(path.join(__dirname + \"/public/index.html\")); }); var server = app.listen(80, function() { var host = server.address().address; var port = server.address().port; console.log(\"startjs Demo Server listening at http://%s:%s\", host, port); }); Next, create a new folder called public and add a new file called index.html inside your \"public\" folder with the following contents: <!doctype html> <html lang=\"en\"> <head> <!-- Required meta tags --> <meta charset=\"utf-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> <!-- Bootstrap CSS --> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"> <title>Hello world!</title> </head> <body> <h1>Hello world!</h1> <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\" integrity=\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" crossorigin=\"anonymous\"></script> </body> </html> Now, type localhost into your web browser. Congrats, you are now serving a website onto your network using Node.JS. Now, let's review the code that we have just written: var express = require(\"express\"); This line allows you to use the Express web server. var path = require(\"path\"); // alllow express to use folders. var app = express(); // create the server These two lines create the Express web server and allows you to server a file on your Web Server. app.use(express.static(\"public\")); // Tell express to use the Public Folder. This line tells Express to use the Public folder to server your website from. app.get(\"/\", function(req, res) { res.sendFile(path.join(__dirname + \"/public/index.html\")); }); // Tells Express where the Homepage is. This line (this is one line, expanded into 3 lines for easier readability) tells Express which file to use as the Homepage. var server = app.listen(80, function() { var host = server.address().address; var port = server.address().port; console.log(\"startjs Demo Server listening at http://%s:%s\", host, port); }); This line (this is one line, expanded into 3 lines for easier readability) starts the server. The HTML file is a standard website. Feel free to change it to any HTML code. Just keep it's name as index.html.","title":"Making the Web Server:"},{"location":"projects/node/","text":"NodeJS (Serverside Javascript)","title":"NodeJS \\(Serverside Javascript\\)"},{"location":"projects/node/#nodejs-40serverside-javascript41","text":"","title":"NodeJS (Serverside Javascript)"},{"location":"projects/node/getting-started-with-a-basic-youtube-video-downloader-part.-1/","text":"Building a Basic Youtube Video Downloader (Part. 1) Getting Started First Off, Create a New Folder called DownloadYT Next, follow our Setting up a Folder from our Yarn Tutorial. Then, run the following in the Visual Studio Code Terminal (in your new folder) yarn add ytdl-core yarn add express yarn add open Next, create a new file called index.js and add the following to it: // Add all the libraries const fs = require(\"fs\"); const open = require(\"open\"); const ytdl = require(\"ytdl-core\"); // init project const express = require(\"express\"); const app = express(); let os = require('os') // we've started you off with Express, // but feel free to use whatever libs or frameworks you'd like through `package.json`. ytdl(\"https://www.youtube.com/watch?v=Yp-VBg3LFqY\", { filter: format => format.container === 'mp4' }).pipe(fs.createWriteStream(\"video.mp4\")); var dir = os.userInfo().homedir + \"/videos/downloadYT\"; if (!fs.existsSync(dir)) { fs.mkdirSync(dir); console.log(\"madedir\") } // http://expressjs.com/en/starter/basic-routing.html app.get(\"/:id\", function(req, res) { console.log(\"readytogo\") var stream = ytdl(\"https://www.youtube.com/watch?v=\" + req.params.id, { filter: format => format.container === \"mp4\" }).pipe(fs.createWriteStream(os.userInfo().homedir + \"/videos/downloadYT/\" + req.params.id+ \".mp4\")); stream.on('finish', function () { open( os.userInfo().homedir + \"/videos/downloadYT/\" + req.params.id + \".mp4\" ); res.send(os.userInfo().homedir + \"/videos/downloadYT/\" + req.params.id + \".mp4\"); console.log(\"done\") }); }); // listen for requests :) const listener = app.listen(18080, function() { console.log(\"Your app is listening on port \" + listener.address().port); }); listener.setTimeout(99999999999999999999); Creating the Package We need to add a new package to achieve this called pkg. For a good tutorial on this, use this . Run the following in the VS code Terminal. yarn global add pkg This installed the JavaScript compiler onto your computer. To compile an application, run the following in the Visual Studio Code terminal: pkg . Voila. We now have 3 files, one for each OS. Simply open the file like an app you wanted to install. This will start up the application ready to use in Part 2. Code Explainer const fs = require(\"fs\"); const open = require(\"open\"); const ytdl = require(\"ytdl-core\"); // init project const express = require(\"express\"); const app = express(); let os = require('os') This adds all the required NPM Packages to your app. ytdl(\"https://www.youtube.com/watch?v=Yp-VBg3LFqY\", { filter: format => format.container === 'mp4' }).pipe(fs.createWriteStream(\"video.mp4\")); var dir = os.userInfo().homedir + \"/videos/downloadYT\"; This makes sure the app is working by downloading a sample video. if (!fs.existsSync(dir)) { fs.mkdirSync(dir); console.log(\"madedir\") } This makes sure the youtube download folder has been created. If it has not, it creates it. app.get(\"/:id\", function(req, res) { console.log(\"readytogo\") This triggers when part 2 tells the app download a video. var stream = ytdl(\"https://www.youtube.com/watch?v=\" + req.params.id, { filter: format => format.container === \"mp4\" }).pipe(fs.createWriteStream(os.userInfo().homedir + \"/videos/downloadYT/\" + req.params.id+ \".mp4\")); This downloads the youtube video. stream.on('finish', function () { open( os.userInfo().homedir + \"/videos/downloadYT/\" + req.params.id + \".mp4\" ); res.send(os.userInfo().homedir + \"/videos/downloadYT/\" + req.params.id + \".mp4\"); console.log(\"done\") }); }); This tells Part 2 that the download is done. const listener = app.listen(18080, function() { console.log(\"Your app is listening on port \" + listener.address().port); }); This starts the app listener.setTimeout(99999999999999999999); This prevents the downloads from timing out.","title":"Building a Basic Youtube Video Downloader \\(Part. 1\\)"},{"location":"projects/node/getting-started-with-a-basic-youtube-video-downloader-part.-1/#building-a-basic-youtube-video-downloader-40part-141","text":"","title":"Building a Basic Youtube Video Downloader (Part. 1)"},{"location":"projects/node/getting-started-with-a-basic-youtube-video-downloader-part.-1/#getting-started","text":"First Off, Create a New Folder called DownloadYT Next, follow our Setting up a Folder from our Yarn Tutorial. Then, run the following in the Visual Studio Code Terminal (in your new folder) yarn add ytdl-core yarn add express yarn add open Next, create a new file called index.js and add the following to it: // Add all the libraries const fs = require(\"fs\"); const open = require(\"open\"); const ytdl = require(\"ytdl-core\"); // init project const express = require(\"express\"); const app = express(); let os = require('os') // we've started you off with Express, // but feel free to use whatever libs or frameworks you'd like through `package.json`. ytdl(\"https://www.youtube.com/watch?v=Yp-VBg3LFqY\", { filter: format => format.container === 'mp4' }).pipe(fs.createWriteStream(\"video.mp4\")); var dir = os.userInfo().homedir + \"/videos/downloadYT\"; if (!fs.existsSync(dir)) { fs.mkdirSync(dir); console.log(\"madedir\") } // http://expressjs.com/en/starter/basic-routing.html app.get(\"/:id\", function(req, res) { console.log(\"readytogo\") var stream = ytdl(\"https://www.youtube.com/watch?v=\" + req.params.id, { filter: format => format.container === \"mp4\" }).pipe(fs.createWriteStream(os.userInfo().homedir + \"/videos/downloadYT/\" + req.params.id+ \".mp4\")); stream.on('finish', function () { open( os.userInfo().homedir + \"/videos/downloadYT/\" + req.params.id + \".mp4\" ); res.send(os.userInfo().homedir + \"/videos/downloadYT/\" + req.params.id + \".mp4\"); console.log(\"done\") }); }); // listen for requests :) const listener = app.listen(18080, function() { console.log(\"Your app is listening on port \" + listener.address().port); }); listener.setTimeout(99999999999999999999);","title":"Getting Started"},{"location":"projects/node/getting-started-with-a-basic-youtube-video-downloader-part.-1/#creating-the-package","text":"We need to add a new package to achieve this called pkg. For a good tutorial on this, use this . Run the following in the VS code Terminal. yarn global add pkg This installed the JavaScript compiler onto your computer. To compile an application, run the following in the Visual Studio Code terminal: pkg . Voila. We now have 3 files, one for each OS. Simply open the file like an app you wanted to install. This will start up the application ready to use in Part 2.","title":"Creating the Package"},{"location":"projects/node/getting-started-with-a-basic-youtube-video-downloader-part.-1/#code-explainer","text":"const fs = require(\"fs\"); const open = require(\"open\"); const ytdl = require(\"ytdl-core\"); // init project const express = require(\"express\"); const app = express(); let os = require('os') This adds all the required NPM Packages to your app. ytdl(\"https://www.youtube.com/watch?v=Yp-VBg3LFqY\", { filter: format => format.container === 'mp4' }).pipe(fs.createWriteStream(\"video.mp4\")); var dir = os.userInfo().homedir + \"/videos/downloadYT\"; This makes sure the app is working by downloading a sample video. if (!fs.existsSync(dir)) { fs.mkdirSync(dir); console.log(\"madedir\") } This makes sure the youtube download folder has been created. If it has not, it creates it. app.get(\"/:id\", function(req, res) { console.log(\"readytogo\") This triggers when part 2 tells the app download a video. var stream = ytdl(\"https://www.youtube.com/watch?v=\" + req.params.id, { filter: format => format.container === \"mp4\" }).pipe(fs.createWriteStream(os.userInfo().homedir + \"/videos/downloadYT/\" + req.params.id+ \".mp4\")); This downloads the youtube video. stream.on('finish', function () { open( os.userInfo().homedir + \"/videos/downloadYT/\" + req.params.id + \".mp4\" ); res.send(os.userInfo().homedir + \"/videos/downloadYT/\" + req.params.id + \".mp4\"); console.log(\"done\") }); }); This tells Part 2 that the download is done. const listener = app.listen(18080, function() { console.log(\"Your app is listening on port \" + listener.address().port); }); This starts the app listener.setTimeout(99999999999999999999); This prevents the downloads from timing out.","title":"Code Explainer"},{"location":"start-a-project/projects/","text":"StartJS Projects StartJS Projects: At StartJS we have a wide range of projects of different types for you to choose from. We have project choices from Frontend Design to Backend Server and Chatbots. Below are links to the two different categories: General Projects , Frontend Projects , Backend Projects . Note that in this category we only have Starter Projects, for more projects and examples like Mobile and Desktop apps, check out the Framework Examples (coming soon).","title":"StartJS Projects"},{"location":"start-a-project/projects/#startjs-projects","text":"","title":"StartJS Projects"},{"location":"start-a-project/projects/#startjs-projects_1","text":"At StartJS we have a wide range of projects of different types for you to choose from. We have project choices from Frontend Design to Backend Server and Chatbots. Below are links to the two different categories: General Projects , Frontend Projects , Backend Projects . Note that in this category we only have Starter Projects, for more projects and examples like Mobile and Desktop apps, check out the Framework Examples (coming soon).","title":"StartJS Projects:"},{"location":"start-a-project/general/expressjs/","text":"ExpressJS Web Server Start Guide Getting Started (with Yarn) {% hint style=\"warning\" %} Notice: This step requires that you have read our NPM and Yarn Tutorials and have completed the install step of the Yarn tutorial. {% endhint %} First off, create a new folder called StartJS_Express. Then, open it in Visual Studio Code and complete the \"How to Initialize a Folder using Yarn\" section of our Yarn guide. Next, run the following commands in the Terminal Feature of Visual Studio Code: yarn add express This has installed the web server module to your folder. Now you can start on creating a basic Node.js Express Web Server: Making the Web Server: In this step we will make the web server. Make sure you have your new folder open in Visual Studio Code. First off, create a new file called index.js with the following contents: // this line allows us to use the express.js module var express = require(\"express\"); // Add this line so we can serve files from our local // directory var path = require(\"path\"); var app = express(); // Add the ability to serve our static files from the public directory app.use(express.static(\"public\")); // Here we serve up our index page app.get(\"/\", function(req, res) { res.sendFile(path.join(__dirname + \"/public/index.html\")); }); var server = app.listen(80, function() { var host = server.address().address; var port = server.address().port; console.log(\"startjs Demo Server listening at http://%s:%s\", host, port); }); Next, create a new folder called public and add a new file called index.html inside your \"public\" folder with the following contents: <!doctype html> <html lang=\"en\"> <head> <!-- Required meta tags --> <meta charset=\"utf-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> <!-- Bootstrap CSS --> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"> <title>Hello world!</title> </head> <body> <h1>Hello world!</h1> <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\" integrity=\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" crossorigin=\"anonymous\"></script> </body> </html> Now, type localhost into your web browser. Congrats, you are now serving a website onto your network using Node.JS. Now, let's review the code that we have just written: var express = require(\"express\"); This line allows you to use the Express web server. var path = require(\"path\"); // alllow express to use folders. var app = express(); // create the server These two lines create the Express web server and allows you to server a file on your Web Server. app.use(express.static(\"public\")); // Tell express to use the Public Folder. This line tells Express to use the Public folder to server your website from. app.get(\"/\", function(req, res) { res.sendFile(path.join(__dirname + \"/public/index.html\")); }); // Tells Express where the Homepage is. This line (this is one line, expanded into 3 lines for easier readability) tells Express which file to use as the Homepage. var server = app.listen(80, function() { var host = server.address().address; var port = server.address().port; console.log(\"startjs Demo Server listening at http://%s:%s\", host, port); }); This line (this is one line, expanded into 3 lines for easier readability) starts the server. The HTML file is a standard website. Feel free to change it to any HTML code. Just keep it's name as index.html.","title":"ExpressJS Web Server Start Guide"},{"location":"start-a-project/general/expressjs/#expressjs-web-server-start-guide","text":"","title":"ExpressJS Web Server Start Guide"},{"location":"start-a-project/general/expressjs/#getting-started-with-yarn","text":"{% hint style=\"warning\" %} Notice: This step requires that you have read our NPM and Yarn Tutorials and have completed the install step of the Yarn tutorial. {% endhint %} First off, create a new folder called StartJS_Express. Then, open it in Visual Studio Code and complete the \"How to Initialize a Folder using Yarn\" section of our Yarn guide. Next, run the following commands in the Terminal Feature of Visual Studio Code: yarn add express This has installed the web server module to your folder. Now you can start on creating a basic Node.js Express Web Server:","title":"Getting Started (with Yarn)"},{"location":"start-a-project/general/expressjs/#making-the-web-server","text":"In this step we will make the web server. Make sure you have your new folder open in Visual Studio Code. First off, create a new file called index.js with the following contents: // this line allows us to use the express.js module var express = require(\"express\"); // Add this line so we can serve files from our local // directory var path = require(\"path\"); var app = express(); // Add the ability to serve our static files from the public directory app.use(express.static(\"public\")); // Here we serve up our index page app.get(\"/\", function(req, res) { res.sendFile(path.join(__dirname + \"/public/index.html\")); }); var server = app.listen(80, function() { var host = server.address().address; var port = server.address().port; console.log(\"startjs Demo Server listening at http://%s:%s\", host, port); }); Next, create a new folder called public and add a new file called index.html inside your \"public\" folder with the following contents: <!doctype html> <html lang=\"en\"> <head> <!-- Required meta tags --> <meta charset=\"utf-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> <!-- Bootstrap CSS --> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"> <title>Hello world!</title> </head> <body> <h1>Hello world!</h1> <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\" integrity=\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" crossorigin=\"anonymous\"></script> </body> </html> Now, type localhost into your web browser. Congrats, you are now serving a website onto your network using Node.JS. Now, let's review the code that we have just written: var express = require(\"express\"); This line allows you to use the Express web server. var path = require(\"path\"); // alllow express to use folders. var app = express(); // create the server These two lines create the Express web server and allows you to server a file on your Web Server. app.use(express.static(\"public\")); // Tell express to use the Public Folder. This line tells Express to use the Public folder to server your website from. app.get(\"/\", function(req, res) { res.sendFile(path.join(__dirname + \"/public/index.html\")); }); // Tells Express where the Homepage is. This line (this is one line, expanded into 3 lines for easier readability) tells Express which file to use as the Homepage. var server = app.listen(80, function() { var host = server.address().address; var port = server.address().port; console.log(\"startjs Demo Server listening at http://%s:%s\", host, port); }); This line (this is one line, expanded into 3 lines for easier readability) starts the server. The HTML file is a standard website. Feel free to change it to any HTML code. Just keep it's name as index.html.","title":"Making the Web Server:"},{"location":"start-a-project/general/general/","text":"General Projects In this category we aim to show you some projects using both Nodejs and standard Web-based JavaScript.","title":"General Projects"},{"location":"start-a-project/general/general/#general-projects","text":"In this category we aim to show you some projects using both Nodejs and standard Web-based JavaScript.","title":"General Projects"},{"location":"start-a-project/node/node/","text":"","title":"Node"},{"location":"start-a-project/web/web/","text":"","title":"Web"}]}